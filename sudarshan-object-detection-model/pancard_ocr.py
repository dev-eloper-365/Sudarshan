# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KMaguzaz4SmgzuY4Zfl1IMoY0OmneiUS
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pytesseract

!sudo apt-get install tesseract-ocr

import pytesseract
from PIL import Image, ImageFilter, ImageEnhance
import matplotlib.pyplot as plt
import os
import cv2
import re

from google.colab.patches import cv2_imshow
import numpy as np

img_path = "/content/drive/MyDrive/IMG-20240928-WA0018.jpg"
PAN_Card = cv2.imread(img_path)

# Image loading checker
if PAN_Card is not None:
  cv2_imshow(PAN_Card)
else:
  print("Image not loaded correctly. Please check the file path.")

h,w,c=PAN_Card.shape

if w>1000:
  new_w=1000
  ar = w/h
  new_h=int(new_w/ar)
  img=cv2.resize(PAN_Card,(new_w,new_h),interpolation=cv2.INTER_AREA)
else:
  new_w=1000
  ar = w/h
  new_h=int(new_w/ar)
  img=cv2.resize(PAN_Card,(new_w,new_h),interpolation=cv2.INTER_AREA)
x, y, w, h = 30, 195, 650, 450

# Crop the image to the defined ROI
resized = img[y:y+h, x:x+w]
plt.imshow(resized)

# Grayscale Conversion
gray_image = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray_image)

# Apply the sharpening kernel
sharpening_kernel = np.array([[-1, -1, -1],
                              [-1,  9, -1],
                              [-1, -1, -1]])
sharpened_image = cv2.filter2D(gray_image, -1, sharpening_kernel)

cv2_imshow(sharpened_image)

# Apply thresholding
_, threshold_image = cv2.threshold(sharpened_image, 80, 255, cv2.THRESH_BINARY)
cv2_imshow(threshold_image)

extracted_text = pytesseract.image_to_string(threshold_image, lang='eng+hi')

# Print the extracted text
print("Extracted Text:\n", extracted_text)

lines = extracted_text.strip().split('\n')

# Regex Patterns
name_pattern = re.compile(r'Name\s*:\s*(.*)', re.IGNORECASE)
father_name_pattern = re.compile(r"Father's Name\s*:\s*(.*)", re.IGNORECASE)
dob_pattern = re.compile(r'DOB\s*:\s*(\d{2}/\d{2}/\d{4})')
pan_pattern = re.compile(r'([A-Z]{5}\d{4}[A-Z])')

# Extraction of Data
name_match = name_pattern.search(extracted_text)
father_name_match = father_name_pattern.search(extracted_text)
dob_match = dob_pattern.search(extracted_text)
pan_match = pan_pattern.search(extracted_text)


# Print the extracted details
if name_match:
    print("Name:", name_pattern)
if father_name_match:
    print("Father's Name:", father_name_match.group(1))
if pan_match:
    print("PAN Number:", pan_match.group(1))
if dob_match:
    print("Date of Birth:", dob_match.group(1))

